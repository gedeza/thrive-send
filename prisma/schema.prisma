generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  displayId               String?                @unique @db.VarChar(15)
  clerkId                 String                 @unique
  email                   String                 @unique @db.VarChar(255)
  firstName               String?                @db.VarChar(100)
  lastName                String?                @db.VarChar(100)
  imageUrl                String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  emailVerified           DateTime?
  image                   String?
  name                    String?
  role                    UserRole               @default(CONTENT_CREATOR)
  hasCompletedOnboarding  Boolean                @default(false)
  accounts                Account[]
  activities              Activity[]
  approvalHistory         ApprovalHistory[]      @relation("HistoryCreator")
  assets                  Asset[]
  createdAudiences        Audience[]
  audienceSegments        AudienceSegment[]      @relation("AudienceSegmentCreator")
  boostPurchases          BoostPurchase[]
  calendarEvents          CalendarEvent[]
  campaignTemplates       CampaignTemplate[]
  uploadedDocuments       ClientDocument[]       @relation("DocumentUploader")
  comments                Comment[]              @relation("CommentCreator")
  contactLists            ContactList[]          @relation("ContactListCreator")
  content                 Content[]
  assignedApprovals       ContentApproval[]      @relation("AssignedApprovals")
  createdApprovals        ContentApproval[]      @relation("CreatedApprovals")
  contentLists            ContentList[]
  integrations            Integration[]
  marketplaceListings     MarketplaceListing[]   @relation("MarketplaceListingCreator")
  marketplacePurchases    MarketplacePurchase[]  @relation("MarketplacePurchaseBuyer")
  marketplaceReviews      MarketplaceReview[]    @relation("MarketplaceReviewer")
  notifications           Notification[]
  organizationMemberships OrganizationMember[]
  projects                Project[]
  reports                 Report[]
  reportShares            ReportShare[]
  scheduledReports        ScheduledReport[]
  sessions                Session[]
  targetingRules          TargetingRule[]
  teamInvitations         TeamMemberInvitation[]
  Template                Template[]
  workflows               Workflow[]

  @@index([clerkId])
  @@index([email])
}

model Organization {
  id                        String                         @id @default(cuid())
  displayId                 String?                        @unique @db.VarChar(15)
  name                      String                         @db.VarChar(100)
  slug                      String                         @unique @db.VarChar(100)
  logoUrl                   String?
  website                   String?
  primaryColor              String?                        @default("#000000")
  createdAt                 DateTime                       @default(now())
  updatedAt                 DateTime                       @updatedAt
  clerkOrganizationId       String?                        @unique
  settings                  Json?                          @default("{}")
  type                      String?                        @default("service_provider") @db.VarChar(50)
  subscriptionTier          String?                        @default("basic") @db.VarChar(50)
  maxClients                Int?                           @default(10)
  marketplaceEnabled        Boolean?                       @default(true)
  assets                    Asset[]
  audiences                 Audience[]
  audienceSegments          AudienceSegment[]
  boostProducts             BoostProduct[]
  boostPurchases            BoostPurchase[]
  calendarEvents            CalendarEvent[]
  campaigns                 Campaign[]
  campaignTemplates         CampaignTemplate[]
  clients                   Client[]
  clientPerformanceRankings ClientPerformanceRanking[]
  contactLists              ContactList[]
  content                   Content[]                      @relation("OrganizationContent")
  contentLists              ContentList[]
  crossCampaignAnalytics    CrossCampaignAnalytics[]
  crossClientAnalytics      CrossClientAnalytics[]
  analyticsDetails          CrossClientAnalyticsDetail[]
  integrations              Integration[]
  invitations               Invitation[]
  marketplaceListings       MarketplaceListing[]
  marketplaceRevenue        MarketplaceRevenue[]
  members                   OrganizationMember[]
  projects                  Project[]
  reports                   Report[]
  scheduledReports          ScheduledReport[]
  serviceProviderMetrics    ServiceProviderMetrics[]
  metricsDetails            ServiceProviderMetricsDetail[]
  socialAccounts            SocialAccount[]
  subscription              Subscription?
  targetingRules            TargetingRule[]
  teamInvitations           TeamMemberInvitation[]
  Template                  Template[]
  workflows                 Workflow[]
  newsletters               Newsletter[]
}

model OrganizationMember {
  id                  String               @id @default(cuid())
  role                String               @default("MEMBER")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String
  organizationId      String
  serviceProviderRole ServiceProviderRole? @default(CONTENT_CREATOR)
  clientAssignments   ClientAssignment[]
  organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([userId, organizationId])
}

model Client {
  id                  String                       @id @default(cuid())
  displayId           String?                      @unique @db.VarChar(15)
  name                String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  organizationId      String
  address             String?
  email               String
  phone               String?
  industry            String?
  type                String
  website             String?
  logoUrl             String?
  status              ClientStatus                 @default(ACTIVE)
  monthlyBudget       Decimal?                     @db.Decimal(10, 2)
  serviceProviderId   String?
  onboardedAt         DateTime?
  contractStartDate   DateTime?
  contractEndDate     DateTime?
  analytics           Analytics[]
  boostPurchases      BoostPurchase[]
  budgets             Budget[]
  campaigns           Campaign[]
  organization        Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  clientAssignments   ClientAssignment[]
  documents           ClientDocument[]
  feedback            ClientFeedback[]
  goals               ClientGoal[]
  performanceRankings ClientPerformanceRanking[]
  analyticsDetails    CrossClientAnalyticsDetail[]
  marketplaceRevenue  MarketplaceRevenue[]
  projects            Project[]
  socialAccounts      SocialAccount[]
  newsletters         Newsletter[]

  @@index([organizationId])
  @@index([serviceProviderId])
}

model Project {
  id             String           @id @default(cuid())
  displayId      String?          @unique @db.VarChar(15)
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  status         String           @default("PLANNED")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  clientId       String?
  organizationId String
  managerId      String?
  budgets        Budget[]
  campaigns      Campaign[]
  feedback       ClientFeedback[]
  content        Content[]        @relation("ProjectContent")
  client         Client?          @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager        User?            @relation(fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([clientId])
  @@index([organizationId])
  @@index([managerId])
}

model SocialAccount {
  id             String       @id @default(cuid())
  platform       String
  handle         String
  accountId      String?
  accessToken    String?
  refreshToken   String?
  tokenExpiry    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  clientId       String?
  organizationId String
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  socialPosts    SocialPost[]

  @@unique([platform, handle, organizationId])
}

model SocialPost {
  id              String        @id @default(cuid())
  externalPostId  String?
  status          String        @default("SCHEDULED")
  publishedAt     DateTime?
  scheduledAt     DateTime?
  metrics         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  socialAccountId String
  contentId       String
  contentItem     Content       @relation("ContentSocialPosts", fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Engagement {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  clicks            Int                @default(0)
  conversions       Int                @default(0)
  lastEngagement    DateTime?
  opens             Int                @default(0)
  score             Float              @default(0)
  contentId         String?
  audienceAnalytics AudienceAnalytics?
  content           Content?           @relation("ContentEngagements", fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Analytics {
  id                String    @id @default(cuid())
  clientId          String
  projectCount      Int       @default(0)
  activeProjects    Int       @default(0)
  completedProjects Int       @default(0)
  totalBudget       Float     @default(0)
  usedBudget        Float     @default(0)
  engagementRate    Float     @default(0)
  contentCount      Int       @default(0)
  reachCount        Int       @default(0)
  interactionCount  Int       @default(0)
  conversionRate    Float     @default(0)
  roi               Float     @default(0)
  lastActivity      DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  campaignId        String?
  bounceRate        Float     @default(0)
  clickRate         Float     @default(0)
  clicks            Int       @default(0)
  comments          Int       @default(0)
  conversions       Int       @default(0)
  engagements       Int       @default(0)
  impressions       Int       @default(0)
  likes             Int       @default(0)
  openRate          Float     @default(0)
  revenue           Float     @default(0)
  shares            Int       @default(0)
  views             Int       @default(0)
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([campaignId])
  @@index([createdAt])
}

model Subscription {
  id                   String       @id @default(cuid())
  plan                 String
  status               String
  startDate            DateTime
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organizationId       String       @unique
  billingAddress       Json?
  billingCycle         String
  cancelAtPeriodEnd    Boolean      @default(false)
  currency             String       @default("USD")
  discount             Json?
  features             Json?
  lastBillingDate      DateTime?
  nextBillingDate      DateTime?
  price                Float
  taxInfo              Json?
  trialEndsAt          DateTime?
  usage                Json?
  aiFeatures           Json?        @default("{\"limit\": 0, \"usage\": 0, \"enabled\": false}")
  payments             Payment[]
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Activity {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Campaign {
  id                     String                   @id @default(cuid())
  displayId              String?                  @unique @db.VarChar(15)
  name                   String
  description            String?
  startDate              DateTime?
  endDate                DateTime?
  budget                 Float?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  organizationId         String
  clientId               String?
  projectId              String?
  status                 CampaignStatus           @default(draft)
  actualMetrics          Json?
  audienceId             String?
  customGoal             String?
  goalType               CampaignGoalType
  lastScheduled          DateTime?
  nextScheduled          DateTime?
  scheduleConfig         Json?
  scheduleFrequency      ScheduleFrequency        @default(ONCE)
  targetMetrics          Json?
  templateId             String?
  timezone               String?
  abTests                ABTest[]
  analytics              Analytics[]
  audienceAnalytics      AudienceAnalytics[]
  audience               Audience?                @relation(fields: [audienceId], references: [id])
  client                 Client?                  @relation(fields: [clientId], references: [id], onUpdate: NoAction)
  organization           Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project                Project?                 @relation(fields: [projectId], references: [id], onUpdate: NoAction)
  template               CampaignTemplate?        @relation(fields: [templateId], references: [id])
  content                Content[]                @relation("CampaignContent")
  conversionFunnels      ConversionFunnel[]
  crossCampaignAnalytics CrossCampaignAnalytics[]
  roiTracking            ROITracking[]
  reports                Report[]

  @@index([clientId])
  @@index([projectId])
  @@index([organizationId])
  @@index([status])
  @@index([nextScheduled])
}

model Template {
  id             String       @id
  name           String
  content        String?
  description    String?
  category       String
  status         String       @default("DRAFT")
  lastUpdated    DateTime
  createdAt      DateTime     @default(now())
  previewImage   String?
  organizationId String
  authorId       String
  contents       Content[]
  User           User         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([authorId])
  @@index([organizationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id                String            @id @default(cuid())
  displayId         String?           @unique @db.VarChar(15)
  title             String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  content           String
  tags              String[]
  authorId          String
  excerpt           String?
  media             Json?
  publishedAt       DateTime?
  scheduledAt       DateTime?
  slug              String            @unique
  metadata          Json?
  templateId        String?
  status            ContentStatus
  type              ContentType
  platforms         String[]
  publishingOptions Json?
  campaignId        String?
  organizationId    String?
  projectId         String?
  calendarEvents    CalendarEvent[]
  author            User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  campaign          Campaign?         @relation("CampaignContent", fields: [campaignId], references: [id])
  organization      Organization?     @relation("OrganizationContent", fields: [organizationId], references: [id])
  project           Project?          @relation("ProjectContent", fields: [projectId], references: [id])
  template          Template?         @relation(fields: [templateId], references: [id])
  analytics         ContentAnalytics?
  approval          ContentApproval?
  contentListItems  ContentListItem[]
  engagements       Engagement[]      @relation("ContentEngagements")
  mediaItems        MediaItem[]
  seo               SEO?
  schedule          Schedule?
  socialPosts       SocialPost[]      @relation("ContentSocialPosts")

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([templateId])
  @@index([projectId])
  @@index([campaignId])
  @@index([organizationId])
}

model Schedule {
  id            String            @id @default(cuid())
  contentId     String            @unique
  frequency     ScheduleFrequency
  startDate     DateTime
  endDate       DateTime?
  timezone      String            @default("UTC")
  recurrence    Json?
  lastScheduled DateTime?
  nextScheduled DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  content       Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([nextScheduled])
}

model MediaItem {
  id          String         @id @default(cuid())
  type        String
  url         String
  title       String
  description String?
  metadata    Json?
  altText     String?
  caption     String?
  contentId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  content     Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  usage       MediaUsage[]
  versions    MediaVersion[]

  @@index([contentId])
}

model MediaVersion {
  id          String    @id @default(cuid())
  url         String
  type        String
  metadata    Json?
  mediaItemId String
  createdAt   DateTime  @default(now())
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([mediaItemId])
}

model MediaUsage {
  id          String    @id @default(cuid())
  mediaItemId String
  usageType   String
  metadata    Json?
  createdAt   DateTime  @default(now())
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([mediaItemId])
}

model SEO {
  id           String   @id @default(cuid())
  contentId    String   @unique
  title        String?
  description  String?
  keywords     String[]
  ogImage      String?
  canonicalUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model ContentAnalytics {
  id             String   @id @default(cuid())
  contentId      String   @unique
  views          Int      @default(0)
  likes          Int      @default(0)
  shares         Int      @default(0)
  comments       Int      @default(0)
  engagementRate Float    @default(0)
  conversionRate Float    @default(0)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  content        Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model CalendarEvent {
  id                 String       @id @default(cuid())
  title              String
  description        String?
  type               String
  status             String
  organizationId     String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  socialMediaContent Json?
  analytics          Json?
  articleContent     Json?
  blogPost           Json?
  createdBy          String
  customContent      Json?
  emailCampaign      Json?
  endTime            DateTime
  startTime          DateTime
  contentId          String?
  content            Content?     @relation(fields: [contentId], references: [id])
  creator            User         @relation(fields: [createdBy], references: [id])
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdBy])
  @@index([startTime])
  @@index([type])
  @@index([status])
  @@index([contentId])
}

model ContentApproval {
  id          String            @id @default(cuid())
  contentId   String            @unique
  status      ContentStatus     @default(PENDING_REVIEW)
  currentStep ApprovalStep      @default(REVIEW)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  assignedTo  String?
  history     ApprovalHistory[]
  comments    Comment[]
  assignee    User?             @relation("AssignedApprovals", fields: [assignedTo], references: [id])
  content     Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)
  creator     User              @relation("CreatedApprovals", fields: [createdBy], references: [id])
}

model ApprovalHistory {
  id         String          @id @default(cuid())
  approvalId String
  status     ContentStatus
  step       ApprovalStep
  comment    String?
  createdAt  DateTime        @default(now())
  userId     String
  approval   ContentApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  user       User            @relation("HistoryCreator", fields: [userId], references: [id])

  @@index([approvalId])
  @@index([userId])
}

model Comment {
  id         String          @id @default(cuid())
  approvalId String
  content    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  userId     String
  approval   ContentApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  user       User            @relation("CommentCreator", fields: [userId], references: [id])

  @@index([approvalId])
  @@index([userId])
}

model Notification {
  id        String           @id @default(cuid())
  message   String
  read      Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  type      NotificationType
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([read])
}

model CampaignTemplate {
  id             String       @id @default(cuid())
  displayId      String?      @unique @db.VarChar(15)
  name           String
  description    String?
  content        String?
  status         String       @default("DRAFT")
  createdAt      DateTime     @default(now())
  organizationId String
  updatedAt      DateTime     @updatedAt
  userId         String
  campaigns      Campaign[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
}

model Audience {
  id                 String                @id @default(cuid())
  name               String
  description        String?
  type               AudienceType          @default(CUSTOM)
  status             AudienceStatus        @default(ACTIVE)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  organizationId     String
  createdById        String
  tags               String[]
  lastUpdated        DateTime?
  size               Int                   @default(0)
  source             String?
  importHistory      Json?
  createdBy          User                  @relation(fields: [createdById], references: [id])
  organization       Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  analytics          AudienceAnalytics[]
  changeLogs         AudienceChangeLog[]
  interactions       AudienceInteraction[]
  segments           AudienceSegment[]
  behavioralTracking BehavioralTracking[]
  campaigns          Campaign[]
  contactLists       ContactList[]
  engagementScores   EngagementScore[]
  targetingRules     TargetingRule[]

  @@index([organizationId])
  @@index([createdById])
}

model ContactList {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           ContactListType @default(EMAIL)
  status         AudienceStatus  @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  createdById    String
  audienceId     String?
  contacts       Contact[]
  audience       Audience?       @relation(fields: [audienceId], references: [id])
  createdBy      User            @relation("ContactListCreator", fields: [createdById], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdById])
  @@index([audienceId])
}

model Contact {
  id            String        @id @default(cuid())
  email         String?
  phone         String?
  firstName     String?
  lastName      String?
  customFields  Json?
  status        ContactStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contactListId String
  tags          String[]
  lastContacted DateTime?
  source        String?
  metadata      Json?
  contactList   ContactList   @relation(fields: [contactListId], references: [id], onDelete: Cascade)

  @@unique([email, contactListId])
  @@unique([phone, contactListId])
  @@index([contactListId])
}

model AudienceSegment {
  id             String              @id @default(cuid())
  name           String
  description    String?
  type           AudienceSegmentType @default(CUSTOM)
  rules          Json?
  status         AudienceStatus      @default(ACTIVE)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organizationId String
  createdById    String
  audienceId     String
  size           Int                 @default(0)
  lastUpdated    DateTime?
  conditions     Json?
  audience       Audience            @relation(fields: [audienceId], references: [id])
  createdBy      User                @relation("AudienceSegmentCreator", fields: [createdById], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  targetingRules TargetingRule[]

  @@index([organizationId])
  @@index([createdById])
  @@index([audienceId])
}

model AudienceAnalytics {
  id             String       @id @default(cuid())
  audienceId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  behavioralId   String       @unique
  campaignId     String
  demographicsId String       @unique
  engagementId   String?      @unique
  audience       Audience     @relation(fields: [audienceId], references: [id])
  behavioral     Behavioral   @relation(fields: [behavioralId], references: [id])
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  demographics   Demographics @relation(fields: [demographicsId], references: [id])
  engagement     Engagement?  @relation(fields: [engagementId], references: [id])

  @@index([campaignId])
  @@index([audienceId])
}

model Demographics {
  id        String             @id @default(cuid())
  ageRange  String
  region    String
  segment   String
  gender    String?
  language  String?
  interests String[]
  analytics AudienceAnalytics?
}

model Behavioral {
  id          String             @id @default(cuid())
  timeSlot    String
  device      String
  contentType String
  opens       Int                @default(0)
  clicks      Int                @default(0)
  conversions Int                @default(0)
  bounceRate  Float              @default(0)
  timeOnSite  Int                @default(0)
  analytics   AudienceAnalytics?
}

model AudienceChangeLog {
  id            String   @id @default(cuid())
  audienceId    String
  changeType    String
  changeDetails Json
  createdAt     DateTime @default(now())
  audience      Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model TargetingRule {
  id             String                @id @default(cuid())
  name           String
  description    String?
  type           TargetingRuleType
  operator       TargetingRuleOperator
  value          Json
  conditions     Json?
  isActive       Boolean               @default(true)
  priority       Int                   @default(0)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  segmentId      String
  createdById    String
  organizationId String
  audienceId     String
  audience       Audience              @relation(fields: [audienceId], references: [id])
  createdBy      User                  @relation(fields: [createdById], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  segment        AudienceSegment       @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@index([segmentId])
  @@index([createdById])
  @@index([organizationId])
  @@index([type])
}

model CrossCampaignAnalytics {
  id             String       @id @default(cuid())
  campaignId     String
  metrics        Json
  comparison     Json?
  insights       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([campaignId])
}

model ROITracking {
  id         String   @id @default(cuid())
  campaignId String
  investment Float
  revenue    Float
  roi        Float
  period     String
  details    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model ABTest {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("DRAFT")
  variants    Json
  results     Json?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model ConversionFunnel {
  id         String   @id @default(cuid())
  name       String
  stages     Json
  metrics    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model Asset {
  id             String         @id @default(cuid())
  name           String
  type           String
  url            String
  metadata       Json?
  tags           String[]
  category       String?
  status         String         @default("ACTIVE")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  usages         AssetUsage[]
  versions       AssetVersion[]

  @@index([organizationId])
  @@index([createdById])
}

model AssetVersion {
  id        String   @id @default(cuid())
  version   Int
  url       String
  changes   Json?
  createdAt DateTime @default(now())
  assetId   String
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

model AssetUsage {
  id         String   @id @default(cuid())
  assetId    String
  entityType String
  entityId   String
  usageType  String
  createdAt  DateTime @default(now())
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([entityType, entityId])
}

model Workflow {
  id             String              @id @default(cuid())
  name           String
  description    String?
  type           String
  steps          Json
  triggers       Json?
  status         String              @default("ACTIVE")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organizationId String
  createdById    String
  createdBy      User                @relation(fields: [createdById], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  executions     WorkflowExecution[]

  @@index([organizationId])
  @@index([createdById])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  status      String
  currentStep Int
  data        Json?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  workflow    Workflow  @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
}

model Integration {
  id             String       @id @default(cuid())
  name           String
  type           String
  config         Json
  status         String       @default("ACTIVE")
  lastSync       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  createdById    String
  apiKeys        APIKey[]
  createdBy      User         @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  webhooks       Webhook[]

  @@index([organizationId])
  @@index([createdById])
}

model Webhook {
  id            String      @id @default(cuid())
  url           String
  events        String[]
  secret        String?
  status        String      @default("ACTIVE")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model APIKey {
  id            String      @id @default(cuid())
  name          String
  key           String      @unique
  permissions   String[]
  expiresAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model Report {
  id             String         @id @default(cuid())
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  createdById    String
  campaignId     String
  sections       Json
  campaign       Campaign       @relation(fields: [campaignId], references: [id])
  createdBy      User           @relation(fields: [createdById], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
  exports        ReportExport[]
  shares         ReportShare[]

  @@index([campaignId])
  @@index([createdById])
  @@index([organizationId])
}

model ReportExport {
  id        String   @id @default(cuid())
  reportId  String
  format    String
  status    String   @default("COMPLETED")
  url       String
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model ReportShare {
  id        String   @id @default(cuid())
  reportId  String
  userId    String
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([reportId])
  @@index([userId])
}

model AudienceInteraction {
  id         String   @id @default(cuid())
  audienceId String
  type       String
  data       Json?
  createdAt  DateTime @default(now())
  audience   Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model EngagementScore {
  id         String   @id @default(cuid())
  audienceId String
  score      Float
  factors    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  audience   Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model BehavioralTracking {
  id         String   @id @default(cuid())
  audienceId String
  event      String
  properties Json?
  createdAt  DateTime @default(now())
  audience   Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
  @@index([event])
}

model MarketplaceListing {
  id              String                @id @default(cuid())
  title           String
  description     String
  type            String
  price           Float
  currency        String                @default("USD")
  status          String                @default("ACTIVE")
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  organizationId  String
  createdById     String
  boosts          Boost[]
  createdBy       User                  @relation("MarketplaceListingCreator", fields: [createdById], references: [id])
  organization    Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchases       MarketplacePurchase[]
  reviews         MarketplaceReview[]
  recommendations Recommendation[]

  @@index([organizationId])
  @@index([createdById])
  @@index([type])
  @@index([status])
}

model MarketplacePurchase {
  id        String             @id @default(cuid())
  listingId String
  buyerId   String
  amount    Float
  currency  String
  status    String             @default("PENDING")
  paymentId String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  buyer     User               @relation("MarketplacePurchaseBuyer", fields: [buyerId], references: [id])
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])
  payment   Payment?           @relation(fields: [paymentId], references: [id])

  @@index([listingId])
  @@index([buyerId])
  @@index([paymentId])
}

model MarketplaceReview {
  id         String             @id @default(cuid())
  listingId  String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  listing    MarketplaceListing @relation(fields: [listingId], references: [id])
  reviewer   User               @relation("MarketplaceReviewer", fields: [reviewerId], references: [id])

  @@index([listingId])
  @@index([reviewerId])
}

model Boost {
  id        String             @id @default(cuid())
  listingId String
  type      String
  startDate DateTime
  endDate   DateTime
  status    String             @default("ACTIVE")
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([status])
}

model Recommendation {
  id        String             @id @default(cuid())
  listingId String
  type      String
  score     Float
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([type])
}

model Payment {
  id              String                @id @default(cuid())
  amount          Float
  currency        String
  paymentIntent   String?
  metadata        Json?                 @default("{}")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  subscriptionId  String?
  clientId        String?
  clientSecret    String?
  completedAt     DateTime?
  netAmount       Float?
  organizationId  String?
  paymentMethodId String?
  processingFee   Float?                @default(0)
  productId       String?
  productName     String?
  provider        String                @default("stripe")
  refundAmount    Float?                @default(0)
  refundedAt      DateTime?
  status          PaymentStatus         @default(PENDING)
  purchases       MarketplacePurchase[]
  subscription    Subscription?         @relation(fields: [subscriptionId], references: [id])
  transactions    Transaction[]
  paymentMethods  PaymentMethod[]       @relation("PaymentToPaymentMethod")

  @@index([status])
  @@index([subscriptionId])
  @@index([organizationId])
  @@index([provider])
  @@index([paymentIntent])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  role           String       @default("MEMBER")
  token          String       @unique
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@index([organizationId])
}

model Newsletter {
  id                            String                   @id @default(cuid())
  title                         String
  description                   String?
  clientId                      String?
  organizationId                String
  categories                    String[]                 @default([])
  targetAudience               Json?
  subscriberCount              Int                      @default(0)
  averageOpenRate              Float                    @default(0)
  isActiveForRecommendations   Boolean                  @default(true)
  recommendationWeight         Float                    @default(1.0)
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt

  // Relations
  client                       Client?                  @relation(fields: [clientId], references: [id])
  organization                 Organization             @relation(fields: [organizationId], references: [id])
  outgoingRecommendations     NewsletterRecommendation[] @relation("FromNewsletter")
  incomingRecommendations     NewsletterRecommendation[] @relation("ToNewsletter")
  performanceRecords          RecommendationPerformance[]
  settings                    RecommendationSettings[]

  @@index([organizationId])
  @@index([clientId])
  @@index([isActiveForRecommendations])
  @@index([categories])
}

model NewsletterRecommendation {
  id                    String                        @id @default(cuid())
  fromNewsletterId     String
  toNewsletterId       String
  matchScore           Float
  categoryAlignment    Float?
  audienceCompatibility Float?
  performanceHistory   Float?
  geographicAlignment  Float?
  seasonalRelevance    Float?
  competitionLevel     Float?
  status               NewsletterRecommendationStatus @default(PENDING)
  isAutoGenerated      Boolean                        @default(false)
  lastCalculated       DateTime?
  metadata             Json?
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt

  // Relations
  fromNewsletter       Newsletter                     @relation("FromNewsletter", fields: [fromNewsletterId], references: [id])
  toNewsletter         Newsletter                     @relation("ToNewsletter", fields: [toNewsletterId], references: [id])
  performanceRecords   RecommendationPerformance[]

  @@unique([fromNewsletterId, toNewsletterId])
  @@index([fromNewsletterId])
  @@index([toNewsletterId])
  @@index([status])
  @@index([matchScore])
}

model RecommendationPerformance {
  id                          String                    @id @default(cuid())
  newsletterId               String
  recommendationId           String?
  impressions                Int                       @default(0)
  clicks                     Int                       @default(0)
  conversions                Int                       @default(0)
  revenue                    Float                     @default(0)
  clickThroughRate          Float                     @default(0)
  conversionRate            Float                     @default(0)
  costPerClick              Float                     @default(0)
  returnOnAdSpend           Float                     @default(0)
  trackingPeriodStart       DateTime
  trackingPeriodEnd         DateTime
  metadata                  Json?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt

  // Relations
  newsletter                Newsletter                @relation(fields: [newsletterId], references: [id])
  recommendation           NewsletterRecommendation? @relation(fields: [recommendationId], references: [id])

  @@index([newsletterId])
  @@index([recommendationId])
  @@index([trackingPeriodStart])
  @@index([trackingPeriodEnd])
}

model RecommendationSettings {
  id                      String    @id @default(cuid())
  newsletterId           String
  maxRecommendationsPerDay Int      @default(5)
  minMatchScore          Float     @default(0.7)
  enableAutoRecommendations Boolean @default(true)
  categoryPreferences    String[]  @default([])
  excludedOrganizations  String[]  @default([])
  geographicRestrictions Json?
  customCriteria         Json?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  newsletter             Newsletter @relation(fields: [newsletterId], references: [id])

  @@unique([newsletterId])
  @@index([newsletterId])
}

model ClientGoal {
  id           String          @id @default(cuid())
  name         String
  description  String?
  targetValue  Float?
  currentValue Float?
  startDate    DateTime
  endDate      DateTime?
  status       GoalStatus      @default(IN_PROGRESS)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  clientId     String
  client       Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones   Milestone[]
  metrics      SuccessMetric[]

  @@index([clientId])
}

model Milestone {
  id            String          @id @default(cuid())
  name          String
  description   String?
  dueDate       DateTime
  completedDate DateTime?
  status        MilestoneStatus @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  goalId        String
  goal          ClientGoal      @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
}

model SuccessMetric {
  id           String     @id @default(cuid())
  name         String
  description  String?
  metricType   MetricType
  targetValue  Float?
  currentValue Float?
  unit         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  goalId       String
  goal         ClientGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
}

model ClientDocument {
  id              String            @id @default(cuid())
  title           String
  fileUrl         String
  fileType        String
  status          DocumentStatus    @default(DRAFT)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clientId        String
  uploadedById    String
  client          Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  uploadedBy      User              @relation("DocumentUploader", fields: [uploadedById], references: [id])
  documentHistory DocumentVersion[]

  @@index([clientId])
  @@index([uploadedById])
}

model DocumentVersion {
  id          String         @id @default(cuid())
  version     Int
  fileUrl     String
  changeNotes String?
  createdAt   DateTime       @default(now())
  documentId  String
  document    ClientDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
}

model ClientFeedback {
  id        String           @id @default(cuid())
  rating    Int
  comment   String?
  category  FeedbackCategory
  status    FeedbackStatus   @default(NEW)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  clientId  String
  projectId String?
  client    Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project   Project?         @relation(fields: [projectId], references: [id])

  @@index([clientId])
  @@index([projectId])
}

model Budget {
  id        String       @id @default(cuid())
  amount    Float
  spent     Float        @default(0)
  remaining Float        @default(0)
  currency  String       @default("USD")
  startDate DateTime
  endDate   DateTime?
  status    BudgetStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  clientId  String
  projectId String?
  client    Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project   Project?     @relation(fields: [projectId], references: [id])
  expenses  Expense[]

  @@index([clientId])
  @@index([projectId])
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  category    ExpenseCategory
  status      ExpenseStatus   @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  budgetId    String
  budget      Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@index([budgetId])
}

model ContentList {
  id             String            @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  ownerId        String
  organizationId String
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  items          ContentListItem[]

  @@index([ownerId])
  @@index([organizationId])
}

model ContentListItem {
  id            String      @id @default(cuid())
  contentId     String
  contentListId String
  createdAt     DateTime    @default(now())
  content       Content     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentList   ContentList @relation(fields: [contentListId], references: [id], onDelete: Cascade)

  @@unique([contentId, contentListId])
  @@index([contentListId])
  @@index([contentId])
}

model PaymentMethod {
  id             String            @id @default(cuid())
  type           PaymentMethodType @default(CARD)
  provider       String            @default("stripe")
  organizationId String
  customerId     String?
  externalId     String
  last4          String?
  brand          String?
  expiryMonth    Int?
  expiryYear     Int?
  isDefault      Boolean           @default(false)
  metadata       Json?             @default("{}")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  transactions   Transaction[]
  payments       Payment[]         @relation("PaymentToPaymentMethod")

  @@index([organizationId])
  @@index([customerId])
  @@index([externalId])
  @@index([isDefault])
}

model Transaction {
  id              String            @id @default(cuid())
  paymentId       String
  paymentIntentId String
  productId       String?
  productName     String?
  clientId        String?
  organizationId  String
  amount          Float
  currency        String
  status          TransactionStatus @default(PENDING)
  paymentMethodId String?
  processingFee   Float             @default(0)
  netAmount       Float
  metadata        Json?             @default("{}")
  createdAt       DateTime          @default(now())
  completedAt     DateTime?
  refundId        String?
  refundAmount    Float?            @default(0)
  refundReason    String?
  refundedAt      DateTime?
  payment         Payment           @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])

  @@index([paymentId])
  @@index([organizationId])
  @@index([clientId])
  @@index([status])
  @@index([paymentIntentId])
  @@index([createdAt])
}

model ClientAssignment {
  id                   String             @id @default(cuid())
  organizationMemberId String
  clientId             String
  role                 String             @default("CONTRIBUTOR")
  permissions          Json               @default("[]")
  assignedAt           DateTime           @default(now())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  client               Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)

  @@unique([organizationMemberId, clientId])
  @@index([organizationMemberId])
  @@index([clientId])
}

model ServiceProviderMetrics {
  id                    String       @id @default(cuid())
  organizationId        String
  date                  DateTime     @db.Date
  totalClients          Int          @default(0)
  activeClients         Int          @default(0)
  totalCampaigns        Int          @default(0)
  activeCampaigns       Int          @default(0)
  totalContent          Int          @default(0)
  publishedContent      Int          @default(0)
  totalRevenue          Decimal      @default(0) @db.Decimal(10, 2)
  marketplaceRevenue    Decimal      @default(0) @db.Decimal(10, 2)
  teamUtilization       Decimal      @default(0) @db.Decimal(5, 2)
  avgClientSatisfaction Decimal      @default(0) @db.Decimal(3, 2)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, date])
  @@index([organizationId, date])
}

model ClientPerformanceRanking {
  id               String       @id @default(cuid())
  organizationId   String
  clientId         String
  rankingDate      DateTime     @db.Date
  performanceScore Decimal      @default(0) @db.Decimal(5, 2)
  engagementRate   Decimal      @default(0) @db.Decimal(5, 2)
  growthRate       Decimal      @default(0) @db.Decimal(5, 2)
  contentVelocity  Int          @default(0)
  budgetEfficiency Decimal      @default(0) @db.Decimal(5, 2)
  rankingPosition  Int          @default(0)
  createdAt        DateTime     @default(now())
  client           Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, clientId, rankingDate])
  @@index([organizationId, rankingDate])
}

model CrossClientAnalytics {
  id               String       @id @default(cuid())
  organizationId   String
  metricType       String       @db.VarChar(100)
  metricValue      Decimal      @db.Decimal(15, 2)
  comparisonPeriod String       @db.VarChar(50)
  clientBreakdown  Json         @default("{}")
  trendData        Json         @default("[]")
  dateRangeStart   DateTime
  dateRangeEnd     DateTime
  createdAt        DateTime     @default(now())
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model MarketplaceRevenue {
  id              String       @id @default(cuid())
  organizationId  String
  clientId        String?
  revenueType     String       @db.VarChar(50)
  amount          Decimal      @db.Decimal(10, 2)
  commissionRate  Decimal      @default(0) @db.Decimal(5, 2)
  transactionDate DateTime
  description     String?
  metadata        Json         @default("{}")
  createdAt       DateTime     @default(now())
  client          Client?      @relation(fields: [clientId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([clientId])
}

model ScheduledReport {
  id               String            @id @default(cuid())
  title            String
  description      String?
  type             String
  frequency        String
  status           String            @default("active")
  recipients       String[]
  format           String            @default("pdf")
  nextRun          DateTime?
  lastRun          DateTime?
  organizationId   String
  createdById      String
  parameters       Json              @default("{}")
  deliverySettings Json              @default("{}")
  performance      Json              @default("{\"totalRuns\": 0, \"successfulRuns\": 0, \"avgGenerationTime\": 0}")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  executions       ReportExecution[]
  createdBy        User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdById])
  @@index([nextRun])
  @@index([status])
}

model ReportExecution {
  id                String          @id @default(cuid())
  scheduledReportId String
  status            String          @default("running")
  startedAt         DateTime        @default(now())
  completedAt       DateTime?
  executionTime     Int?
  fileUrl           String?
  fileSize          Int?
  errorMessage      String?
  metadata          Json            @default("{}")
  scheduledReport   ScheduledReport @relation(fields: [scheduledReportId], references: [id], onDelete: Cascade)

  @@index([scheduledReportId])
  @@index([status])
  @@index([startedAt])
}

model CrossClientAnalyticsDetail {
  id                     String       @id @default(cuid())
  organizationId         String
  clientId               String
  reportDate             DateTime     @db.Date
  metrics                Json         @default("{}")
  socialPlatforms        Json         @default("[]")
  contentTypes           Json         @default("[]")
  topPerformingContent   Json         @default("[]")
  industryBenchmarks     Json         @default("{}")
  performanceVsBenchmark Json         @default("{}")
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  client                 Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization           Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, clientId, reportDate])
  @@index([organizationId])
  @@index([clientId])
  @@index([reportDate])
}

model TeamMemberInvitation {
  id             String       @id @default(cuid())
  email          String
  firstName      String?
  lastName       String?
  role           String
  organizationId String
  invitedById    String
  clientIds      String[]
  permissions    Json         @default("{}")
  status         String       @default("pending")
  token          String       @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  invitedBy      User         @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
  @@index([status])
  @@index([token])
}

model BoostProduct {
  id             String          @id @default(cuid())
  name           String
  description    String
  type           String
  category       String
  price          Decimal         @db.Decimal(10, 2)
  originalPrice  Decimal?        @db.Decimal(10, 2)
  duration       String
  features       String[]
  metrics        Json            @default("{}")
  clientTypes    String[]
  popularity     String          @default("new")
  rating         Decimal         @default(0) @db.Decimal(2, 1)
  reviews        Int             @default(0)
  estimatedROI   String?
  isRecommended  Boolean         @default(false)
  isActive       Boolean         @default(true)
  organizationId String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  purchases      BoostPurchase[]

  @@index([category])
  @@index([type])
  @@index([isActive])
}

model BoostPurchase {
  id             String       @id @default(cuid())
  boostProductId String
  clientId       String
  organizationId String
  userId         String
  status         String       @default("active")
  purchaseDate   DateTime     @default(now())
  price          Decimal      @db.Decimal(10, 2)
  duration       String
  expiresAt      DateTime
  performance    Json         @default("{\"roi\": 0, \"conversions\": 0, \"engagements\": 0, \"impressions\": 0}")
  paymentMethod  String?
  billingAddress Json?
  notes          String?
  metadata       Json         @default("{}")
  boostProduct   BoostProduct @relation(fields: [boostProductId], references: [id], onDelete: Cascade)
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([organizationId])
  @@index([status])
  @@index([purchaseDate])
}

model ServiceProviderMetricsDetail {
  id                 String       @id @default(cuid())
  organizationId     String
  date               DateTime     @db.Date
  revenueMetrics     Json         @default("{}")
  clientMetrics      Json         @default("{}")
  performanceMetrics Json         @default("{}")
  marketplaceMetrics Json         @default("{}")
  teamMetrics        Json         @default("{}")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, date])
  @@index([organizationId])
  @@index([date])
}

enum UserRole {
  CONTENT_CREATOR
  REVIEWER
  APPROVER
  PUBLISHER
  ADMIN
}

enum CampaignStatus {
  draft
  active
  completed
  paused
  cancelled
}

enum CampaignGoalType {
  AWARENESS
  ENGAGEMENT
  CONVERSION
  RETENTION
  REVENUE
  CUSTOM
}

enum ScheduleFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum ContentStatus {
  DRAFT
  PENDING_REVIEW
  IN_REVIEW
  CHANGES_REQUESTED
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

enum ApprovalStep {
  REVIEW
  APPROVAL
  PUBLISH
}

enum NotificationType {
  CONTENT_SUBMITTED
  REVIEW_ASSIGNED
  FEEDBACK_PROVIDED
  STATUS_CHANGED
  APPROVAL_REJECTED
  CONTENT_PUBLISHED
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum AudienceType {
  CUSTOM
  DYNAMIC
  STATIC
}

enum ContactListType {
  EMAIL
  PHONE
  CUSTOM
}

enum AudienceSegmentType {
  CUSTOM
  BEHAVIORAL
  DEMOGRAPHIC
  GEOGRAPHIC
  DEVICE
  TIME_BASED
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  UNSUBSCRIBED
  BOUNCED
  SPAM
}

enum AudienceStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DRAFT
}

enum TargetingRuleOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  GREATER_THAN
  LESS_THAN
  BETWEEN
  IN
  NOT_IN
  EXISTS
  NOT_EXISTS
}

enum TargetingRuleType {
  DEMOGRAPHIC
  BEHAVIORAL
  GEOGRAPHIC
  DEVICE
  TIME
  CUSTOM
}

enum ContentType {
  BLOG
  SOCIAL
  EMAIL
  ARTICLE
  NEWSLETTER
  PODCAST
  VIDEO
  EVENT
  ANNOUNCEMENT
  RESOURCE
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum MetricType {
  NUMERIC
  PERCENTAGE
  CURRENCY
  BOOLEAN
  RATING
}

enum DocumentStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DELETED
}

enum FeedbackCategory {
  GENERAL
  SERVICE_QUALITY
  COMMUNICATION
  DELIVERABLES
  SUPPORT
  OTHER
}

enum FeedbackStatus {
  NEW
  IN_REVIEW
  ADDRESSED
  CLOSED
}

enum BudgetStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ExpenseCategory {
  MARKETING
  DEVELOPMENT
  DESIGN
  CONSULTING
  TOOLS
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  LEAD
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  DIGITAL_WALLET
  CRYPTO
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ServiceProviderRole {
  OWNER
  ADMIN
  MANAGER
  CONTENT_CREATOR
  REVIEWER
  APPROVER
  PUBLISHER
  ANALYST
  CLIENT_MANAGER
}

enum NewsletterRecommendationStatus {
  PENDING
  ACTIVE
  PAUSED
  COMPLETED
  REJECTED
  EXPIRED
}
