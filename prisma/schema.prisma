generator client {
  provider = "prisma-client-js"
  // No custom output path - this ensures it generates in the default location
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  clerkId                 String               @unique
  email                   String               @unique
  firstName               String?
  lastName                String?
  imageUrl                String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  activities              Activity[]
  contentItems            ContentItem[]
  createdContent          ContentPiece[]
  organizationMemberships OrganizationMember[]
  projects                Project[]
  templates               Template[]           // Added relation to templates
}

model Organization {
  id             String               @id @default(cuid())
  name           String
  slug           String               @unique
  logoUrl        String?
  website        String?
  primaryColor   String?              @default("#000000")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  campaigns      Campaign[]
  clients        Client[]
  contentItems   ContentItem[]
  contentPieces  ContentPiece[]
  members        OrganizationMember[]
  projects       Project[]
  socialAccounts SocialAccount[]
  subscription   Subscription?
  templates      Template[]           // Added relation to templates
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Client {
  id             String          @id @default(cuid())
  name           String
  type           ClientType
  industry       String?
  logoUrl        String?
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  analytics      Analytics[]
  campaigns      Campaign[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projects       Project[]
  socialAccounts SocialAccount[]
}

model Project {
  id             String         @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  status         ProjectStatus  @default(PLANNED)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  clientId       String?
  organizationId String
  managerId      String?
  campaigns      Campaign[]
  contentItems   ContentItem[]
  contentPieces  ContentPiece[]
  client         Client?        @relation(fields: [clientId], references: [id])
  manager        User?          @relation(fields: [managerId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model SocialAccount {
  id             String       @id @default(cuid())
  platform       Platform
  handle         String
  accountId      String?
  accessToken    String?
  refreshToken   String?
  tokenExpiry    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  clientId       String?
  organizationId String
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  socialPosts    SocialPost[]
}

model ContentPiece {
  id             String        @id @default(cuid())
  title          String
  content        String
  contentType    ContentType   @default(SOCIAL_POST)
  mediaUrls      String[]
  status         ContentStatus @default(DRAFT)
  scheduledFor   DateTime?
  publishedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  authorId       String
  organizationId String
  projectId      String?
  campaignId     String?
  author         User          @relation(fields: [authorId], references: [id])
  campaign       Campaign?     @relation(fields: [campaignId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?      @relation(fields: [projectId], references: [id])
  engagements    Engagement[]
  socialPosts    SocialPost[]
}

model SocialPost {
  id              String        @id @default(cuid())
  externalPostId  String?
  status          PostStatus    @default(SCHEDULED)
  publishedAt     DateTime?
  scheduledAt     DateTime?
  metrics         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contentPieceId  String
  socialAccountId String
  contentPiece    ContentPiece  @relation(fields: [contentPieceId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
}

model Engagement {
  id             String         @id @default(cuid())
  type           EngagementType
  text           String
  externalId     String?
  sentiment      Sentiment?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  contentPieceId String?
  contentPiece   ContentPiece?  @relation(fields: [contentPieceId], references: [id])
}

model Analytics {
  id                String    @id @default(cuid())
  date              DateTime
  
  // Basic metrics
  impressions       Int       @default(0)
  engagements       Int       @default(0)
  clicks            Int       @default(0)
  shares            Int       @default(0)
  newFollowers      Int       @default(0)
  
  // Expanded metrics
  likes             Int       @default(0)
  comments          Int       @default(0)
  conversions       Int       @default(0)
  revenue           Float?    @default(0)
  
  // Audience demographics
  audienceAge       Json?     // Store age brackets as JSON
  audienceGender    Json?     // Store gender distribution as JSON
  audienceLocation  Json?     // Store geographical data as JSON
  
  // Platform data
  platform          String?   // e.g., "facebook", "instagram", "twitter"
  contentType       String?   // e.g., "post", "story", "ad"
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  campaignId        String?
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
  
  @@index([date])
  @@index([clientId])
  @@index([campaignId])
}

model Campaign {
  id             String         @id @default(cuid())
  name           String
  description    String?        @db.Text
  status         CampaignStatus @default(DRAFT)
  channel        String         @default("Email") // Email, SMS, Social, Push
  audience       String?
  startDate      DateTime?
  endDate        DateTime?
  sentDate       DateTime?
  openRate       String?
  clickRate      String?
  budget         Float?
  goals          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  clientId       String?
  projectId      String?
  client         Client?        @relation(fields: [clientId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?       @relation(fields: [projectId], references: [id])
  contentPieces  ContentPiece[]
  analytics      Analytics[]
  
  @@index([organizationId])
  @@index([clientId])
  @@index([projectId])
  @@map("campaigns")
}

model Subscription {
  id                   String             @id @default(cuid())
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  startDate            DateTime
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organizationId       String             @unique
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ContentItem {
  id             String            @id @default(cuid())
  title          String
  body           String
  status         ContentItemStatus @default(DRAFT)
  scheduledFor   DateTime?
  publishedAt    DateTime?
  previewData    Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  authorId       String
  organizationId String
  projectId      String?
  author         User              @relation(fields: [authorId], references: [id])
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?          @relation(fields: [projectId], references: [id])
}

model Activity {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

// New Template model
model Template {
  id             String           @id @default(cuid())
  name           String
  content        String?          @db.Text
  description    String?          @db.Text
  category       String           // Email, Social Media, Form, Blog, Notification
  status         TemplateStatus   @default(DRAFT)
  lastUpdated    DateTime         @updatedAt
  createdAt      DateTime         @default(now())
  previewImage   String?
  organizationId String
  authorId       String
  
  // Relations
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  author         User             @relation(fields: [authorId], references: [id])
  
  @@index([organizationId])
  @@index([authorId])
  @@map("templates")
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum ClientType {
  MUNICIPALITY
  BUSINESS
  STARTUP
  INDIVIDUAL
  NONPROFIT
}

enum Platform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  PINTEREST
}

enum ContentType {
  SOCIAL_POST
  NEWSLETTER
  ARTICLE
  IMAGE
  VIDEO
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum EngagementType {
  COMMENT
  MESSAGE
  MENTION
  REPLY
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIAL
}

enum ContentItemStatus {
  DRAFT
  REVIEW
  APPROVED
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
}

enum TemplateStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
