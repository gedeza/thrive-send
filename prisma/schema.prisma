generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  clerkId                 String                @unique
  email                   String                @unique @db.VarChar(255)
  firstName               String?               @db.VarChar(100)
  lastName                String?               @db.VarChar(100)
  imageUrl                String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  emailVerified           DateTime?
  image                   String?
  name                    String?
  role                    UserRole              @default(CONTENT_CREATOR)
  accounts                Account[]
  activities              Activity[]
  approvalHistory         ApprovalHistory[]     @relation("HistoryCreator")
  assets                  Asset[]
  createdAudiences        Audience[]
  audienceSegments        AudienceSegment[]     @relation("AudienceSegmentCreator")
  calendarEvents          CalendarEvent[]
  campaignTemplates       CampaignTemplate[]
  comments                Comment[]             @relation("CommentCreator")
  contactLists            ContactList[]         @relation("ContactListCreator")
  content                 Content[]
  assignedApprovals       ContentApproval[]     @relation("AssignedApprovals")
  createdApprovals        ContentApproval[]     @relation("CreatedApprovals")
  contentItems            ContentItem[]
  createdContent          ContentPiece[]
  integrations            Integration[]
  marketplaceListings     MarketplaceListing[]  @relation("MarketplaceListingCreator")
  marketplacePurchases    MarketplacePurchase[] @relation("MarketplacePurchaseBuyer")
  marketplaceReviews      MarketplaceReview[]   @relation("MarketplaceReviewer")
  notifications           Notification[]
  organizationMemberships OrganizationMember[]
  projects                Project[]
  reports                 Report[]
  reportShares            ReportShare[]
  sessions                Session[]
  targetingRules          TargetingRule[]
  Template                Template[]
  workflows               Workflow[]
}

model Organization {
  id                     String                   @id @default(cuid())
  name                   String                   @db.VarChar(100)
  slug                   String                   @unique @db.VarChar(100)
  logoUrl                String?
  website                String?
  primaryColor           String?                  @default("#000000")
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  clerkOrganizationId    String?                  @unique
  assets                 Asset[]
  audiences              Audience[]
  audienceSegments       AudienceSegment[]
  calendarEvents         CalendarEvent[]
  campaigns              Campaign[]
  campaignTemplates      CampaignTemplate[]
  clients                Client[]
  contactLists           ContactList[]
  contentItems           ContentItem[]
  contentPieces          ContentPiece[]
  crossCampaignAnalytics CrossCampaignAnalytics[]
  integrations           Integration[]
  invitations            Invitation[]
  marketplaceListings    MarketplaceListing[]
  members                OrganizationMember[]
  projects               Project[]
  reports                Report[]
  socialAccounts         SocialAccount[]
  subscription           Subscription?
  targetingRules         TargetingRule[]
  Template               Template[]
  workflows              Workflow[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           String       @default("MEMBER")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, organizationId])
}

model Client {
  id             String          @id @default(cuid())
  name           String
  type           String
  industry       String?
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  address        String?
  email          String
  phone          String?
  analytics      Analytics[]
  campaigns      Campaign[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projects       Project[]
  socialAccounts SocialAccount[]

  @@index([organizationId])
}

model Project {
  id             String         @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  status         String         @default("PLANNED")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  clientId       String?
  organizationId String
  managerId      String?
  campaigns      Campaign[]
  contentItems   ContentItem[]
  contentPieces  ContentPiece[]
  client         Client?        @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager        User?          @relation(fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SocialAccount {
  id             String       @id @default(cuid())
  platform       String
  handle         String
  accountId      String?
  accessToken    String?
  refreshToken   String?
  tokenExpiry    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  clientId       String?
  organizationId String
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  socialPosts    SocialPost[]

  @@unique([platform, handle, organizationId])
}

model ContentPiece {
  id             String       @id @default(cuid())
  title          String
  content        String
  contentType    String       @default("SOCIAL_POST")
  mediaUrls      String[]
  status         String       @default("DRAFT")
  scheduledFor   DateTime?
  publishedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authorId       String
  organizationId String
  projectId      String?
  campaignId     String?
  color          String?
  recurrence     Json?
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  campaign       Campaign?    @relation(fields: [campaignId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  engagements    Engagement[]
  socialPosts    SocialPost[]

  @@index([organizationId, status])
  @@index([authorId, createdAt])
}

model SocialPost {
  id              String        @id @default(cuid())
  externalPostId  String?
  status          String        @default("SCHEDULED")
  publishedAt     DateTime?
  scheduledAt     DateTime?
  metrics         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contentPieceId  String
  socialAccountId String
  contentPiece    ContentPiece  @relation(fields: [contentPieceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Engagement {
  id             String        @id @default(cuid())
  type           String
  text           String
  externalId     String?
  sentiment      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  contentPieceId String?
  contentPiece   ContentPiece? @relation(fields: [contentPieceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Analytics {
  id                String    @id @default(cuid())
  clientId         String
  campaignId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  projectCount     Int       @default(0)
  activeProjects   Int       @default(0)
  completedProjects Int      @default(0)
  totalBudget      Float     @default(0)
  usedBudget       Float     @default(0)
  engagementRate   Float     @default(0)
  contentCount     Int       @default(0)
  reachCount       Int       @default(0)
  interactionCount Int       @default(0)
  conversionRate   Float     @default(0)
  roi              Float     @default(0)
  lastActivity     DateTime  @default(now())
  client           Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  campaign         Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([campaignId])
}

model Subscription {
  id                   String       @id @default(cuid())
  plan                 String
  status               String
  startDate            DateTime
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organizationId       String       @unique
  billingAddress       Json?
  billingCycle         String
  cancelAtPeriodEnd    Boolean      @default(false)
  currency             String       @default("USD")
  discount             Json?
  features             Json?
  lastBillingDate      DateTime?
  nextBillingDate      DateTime?
  price                Float
  taxInfo              Json?
  trialEndsAt          DateTime?
  usage                Json?
  payments             Payment[]
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ContentItem {
  id             String       @id @default(cuid())
  title          String
  body           String
  status         String       @default("DRAFT")
  scheduledFor   DateTime?
  publishedAt    DateTime?
  previewData    Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authorId       String
  organizationId String
  projectId      String?
  author         User         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Activity {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Campaign {
  id                     String                   @id @default(cuid())
  name                   String
  description            String?
  startDate              DateTime?
  endDate                DateTime?
  budget                 Float?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  organizationId         String
  clientId               String?
  projectId              String?
  status                 CampaignStatus           @default(draft)
  actualMetrics          Json?
  audienceId             String?
  customGoal             String?
  goalType               CampaignGoalType
  lastScheduled          DateTime?
  nextScheduled          DateTime?
  scheduleConfig         Json?
  scheduleFrequency      ScheduleFrequency        @default(ONCE)
  targetMetrics          Json?
  templateId             String?
  timezone               String?
  abTests                ABTest[]
  analytics              Analytics[]
  audience               Audience?                @relation(fields: [audienceId], references: [id])
  client                 Client?                  @relation(fields: [clientId], references: [id], onUpdate: NoAction)
  organization           Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project                Project?                 @relation(fields: [projectId], references: [id], onUpdate: NoAction)
  template               CampaignTemplate?        @relation(fields: [templateId], references: [id])
  contentPieces          ContentPiece[]
  conversionFunnels      ConversionFunnel[]
  crossCampaignAnalytics CrossCampaignAnalytics[]
  roiTracking            ROITracking[]

  @@index([clientId])
  @@index([projectId])
  @@index([organizationId])
  @@index([status])
  @@index([nextScheduled])
}

model Template {
  id             String       @id
  name           String
  content        String?
  description    String?
  category       String
  status         String       @default("DRAFT")
  lastUpdated    DateTime
  createdAt      DateTime     @default(now())
  previewImage   String?
  organizationId String
  authorId       String
  contents       Content[]
  User           User         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([authorId])
  @@index([organizationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id          String            @id @default(cuid())
  title       String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  content     String
  tags        String[]
  authorId    String
  excerpt     String?
  media       Json?
  publishedAt DateTime?
  scheduledAt DateTime?
  slug        String            @unique
  metadata    Json?
  templateId  String?
  status      ContentStatus
  type        ContentType
  author      User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  template    Template?         @relation(fields: [templateId], references: [id])
  analytics   ContentAnalytics?
  approval    ContentApproval?
  mediaItems  MediaItem[]
  seo         SEO?
  schedule    Schedule?

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([templateId])
}

model Schedule {
  id            String            @id @default(cuid())
  contentId     String            @unique
  frequency     ScheduleFrequency
  startDate     DateTime
  endDate       DateTime?
  timezone      String            @default("UTC")
  recurrence    Json?
  lastScheduled DateTime?
  nextScheduled DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  content       Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([nextScheduled])
}

model MediaItem {
  id          String         @id @default(cuid())
  type        String
  url         String
  title       String
  description String?
  metadata    Json?
  altText     String?
  caption     String?
  contentId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  content     Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  usage       MediaUsage[]
  versions    MediaVersion[]

  @@index([contentId])
}

model MediaVersion {
  id          String    @id @default(cuid())
  url         String
  type        String
  metadata    Json?
  mediaItemId String
  createdAt   DateTime  @default(now())
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([mediaItemId])
}

model MediaUsage {
  id          String    @id @default(cuid())
  mediaItemId String
  usageType   String
  metadata    Json?
  createdAt   DateTime  @default(now())
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)

  @@index([mediaItemId])
}

model SEO {
  id           String   @id @default(cuid())
  contentId    String   @unique
  title        String?
  description  String?
  keywords     String[]
  ogImage      String?
  canonicalUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model ContentAnalytics {
  id             String   @id @default(cuid())
  contentId      String   @unique
  views          Int      @default(0)
  likes          Int      @default(0)
  shares         Int      @default(0)
  comments       Int      @default(0)
  engagementRate Float    @default(0)
  conversionRate Float    @default(0)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  content        Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model CalendarEvent {
  id                 String       @id @default(cuid())
  title              String
  description        String?
  type               String
  status             String
  organizationId     String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  socialMediaContent Json?
  analytics          Json?
  articleContent     Json?
  blogPost           Json?
  createdBy          String
  customContent      Json?
  emailCampaign      Json?
  endTime            DateTime
  startTime          DateTime
  creator            User         @relation(fields: [createdBy], references: [id])
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdBy])
  @@index([startTime])
  @@index([type])
  @@index([status])
}

model ContentApproval {
  id          String            @id @default(cuid())
  contentId   String            @unique
  status      ContentStatus     @default(PENDING_REVIEW)
  currentStep ApprovalStep      @default(REVIEW)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  assignedTo  String?
  history     ApprovalHistory[]
  comments    Comment[]
  assignee    User?             @relation("AssignedApprovals", fields: [assignedTo], references: [id])
  content     Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)
  creator     User              @relation("CreatedApprovals", fields: [createdBy], references: [id])
}

model ApprovalHistory {
  id         String          @id @default(cuid())
  approvalId String
  status     ContentStatus
  step       ApprovalStep
  comment    String?
  createdAt  DateTime        @default(now())
  userId     String
  approval   ContentApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  user       User            @relation("HistoryCreator", fields: [userId], references: [id])

  @@index([approvalId])
  @@index([userId])
}

model Comment {
  id         String          @id @default(cuid())
  approvalId String
  content    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  userId     String
  approval   ContentApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  user       User            @relation("CommentCreator", fields: [userId], references: [id])

  @@index([approvalId])
  @@index([userId])
}

model Notification {
  id        String           @id @default(cuid())
  message   String
  read      Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  type      NotificationType
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([read])
}

model CampaignTemplate {
  id             String       @id @default(cuid())
  name           String
  description    String?
  content        String?      @db.Text
  status         String       @default("DRAFT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  userId         String       // Foreign key for User
  campaigns      Campaign[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
}

model Audience {
  id                 String                @id @default(cuid())
  name               String
  description        String?
  type               AudienceType          @default(CUSTOM)
  status             AudienceStatus        @default(ACTIVE)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  organizationId     String
  createdById        String
  tags               String[]
  lastUpdated        DateTime?
  size               Int                   @default(0)
  source             String?
  importHistory      Json?
  createdBy          User                  @relation(fields: [createdById], references: [id])
  organization       Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  analytics          AudienceAnalytics[]
  changeLogs         AudienceChangeLog[]
  interactions       AudienceInteraction[]
  segments           AudienceSegment[]
  behavioralTracking BehavioralTracking[]
  campaigns          Campaign[]
  contactLists       ContactList[]
  engagementScores   EngagementScore[]
  targetingRules     TargetingRule[]

  @@index([organizationId])
  @@index([createdById])
}

model ContactList {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           ContactListType @default(EMAIL)
  status         AudienceStatus  @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  createdById    String
  audienceId     String?
  contacts       Contact[]
  audience       Audience?       @relation(fields: [audienceId], references: [id])
  createdBy      User            @relation("ContactListCreator", fields: [createdById], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdById])
  @@index([audienceId])
}

model Contact {
  id            String        @id @default(cuid())
  email         String?
  phone         String?
  firstName     String?
  lastName      String?
  customFields  Json?
  status        ContactStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contactListId String
  tags          String[]
  lastContacted DateTime?
  source        String?
  metadata      Json?
  contactList   ContactList   @relation(fields: [contactListId], references: [id], onDelete: Cascade)

  @@unique([email, contactListId])
  @@unique([phone, contactListId])
  @@index([contactListId])
}

model AudienceSegment {
  id             String              @id @default(cuid())
  name           String
  description    String?
  type           AudienceSegmentType @default(CUSTOM)
  rules          Json?
  status         AudienceStatus      @default(ACTIVE)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organizationId String
  createdById    String
  audienceId     String
  size           Int                 @default(0)
  lastUpdated    DateTime?
  conditions     Json?
  audience       Audience            @relation(fields: [audienceId], references: [id])
  createdBy      User                @relation("AudienceSegmentCreator", fields: [createdById], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  targetingRules TargetingRule[]

  @@index([organizationId])
  @@index([createdById])
  @@index([audienceId])
}

model AudienceAnalytics {
  id             String   @id @default(cuid())
  audienceId     String
  metrics        Json?
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  segmentMetrics Json?
  growthRate     Float?
  engagementRate Float?
  audience       Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model AudienceChangeLog {
  id            String   @id @default(cuid())
  audienceId    String
  changeType    String
  changeDetails Json
  createdAt     DateTime @default(now())
  audience      Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model TargetingRule {
  id             String                @id @default(cuid())
  name           String
  description    String?
  type           TargetingRuleType
  operator       TargetingRuleOperator
  value          Json
  conditions     Json?
  isActive       Boolean               @default(true)
  priority       Int                   @default(0)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  segmentId      String
  createdById    String
  organizationId String
  audienceId     String
  audience       Audience              @relation(fields: [audienceId], references: [id])
  createdBy      User                  @relation(fields: [createdById], references: [id])
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  segment        AudienceSegment       @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@index([segmentId])
  @@index([createdById])
  @@index([organizationId])
  @@index([type])
}

model CrossCampaignAnalytics {
  id             String       @id @default(cuid())
  campaignId     String
  metrics        Json
  comparison     Json?
  insights       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([campaignId])
}

model ROITracking {
  id         String   @id @default(cuid())
  campaignId String
  investment Float
  revenue    Float
  roi        Float
  period     String
  details    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model ABTest {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("DRAFT")
  variants    Json
  results     Json?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model ConversionFunnel {
  id         String   @id @default(cuid())
  name       String
  stages     Json
  metrics    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model Asset {
  id             String         @id @default(cuid())
  name           String
  type           String
  url            String
  metadata       Json?
  tags           String[]
  category       String?
  status         String         @default("ACTIVE")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  usages         AssetUsage[]
  versions       AssetVersion[]

  @@index([organizationId])
  @@index([createdById])
}

model AssetVersion {
  id        String   @id @default(cuid())
  version   Int
  url       String
  changes   Json?
  createdAt DateTime @default(now())
  assetId   String
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

model AssetUsage {
  id         String   @id @default(cuid())
  assetId    String
  entityType String
  entityId   String
  usageType  String
  createdAt  DateTime @default(now())
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([entityType, entityId])
}

model Workflow {
  id             String              @id @default(cuid())
  name           String
  description    String?
  type           String
  steps          Json
  triggers       Json?
  status         String              @default("ACTIVE")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organizationId String
  createdById    String
  createdBy      User                @relation(fields: [createdById], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  executions     WorkflowExecution[]

  @@index([organizationId])
  @@index([createdById])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  status      String
  currentStep Int
  data        Json?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  workflow    Workflow  @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
}

model Integration {
  id             String       @id @default(cuid())
  name           String
  type           String
  config         Json
  status         String       @default("ACTIVE")
  lastSync       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  createdById    String
  apiKeys        APIKey[]
  createdBy      User         @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  webhooks       Webhook[]

  @@index([organizationId])
  @@index([createdById])
}

model Webhook {
  id            String      @id @default(cuid())
  url           String
  events        String[]
  secret        String?
  status        String      @default("ACTIVE")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model APIKey {
  id            String      @id @default(cuid())
  name          String
  key           String      @unique
  permissions   String[]
  expiresAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model Report {
  id             String         @id @default(cuid())
  name           String
  type           String
  template       Json
  schedule       Json?
  status         String         @default("ACTIVE")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  exports        ReportExport[]
  shares         ReportShare[]

  @@index([organizationId])
  @@index([createdById])
}

model ReportExport {
  id        String   @id @default(cuid())
  reportId  String
  format    String
  status    String
  url       String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model ReportShare {
  id          String   @id @default(cuid())
  reportId    String
  userId      String
  permissions String[]
  createdAt   DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([reportId])
  @@index([userId])
}

model AudienceInteraction {
  id         String   @id @default(cuid())
  audienceId String
  type       String
  data       Json?
  createdAt  DateTime @default(now())
  audience   Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model EngagementScore {
  id         String   @id @default(cuid())
  audienceId String
  score      Float
  factors    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  audience   Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
}

model BehavioralTracking {
  id         String   @id @default(cuid())
  audienceId String
  event      String
  properties Json?
  createdAt  DateTime @default(now())
  audience   Audience @relation(fields: [audienceId], references: [id])

  @@index([audienceId])
  @@index([event])
}

model MarketplaceListing {
  id              String                @id @default(cuid())
  title           String
  description     String
  type            String
  price           Float
  currency        String                @default("USD")
  status          String                @default("ACTIVE")
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  organizationId  String
  createdById     String
  boosts          Boost[]
  createdBy       User                  @relation("MarketplaceListingCreator", fields: [createdById], references: [id])
  organization    Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchases       MarketplacePurchase[]
  reviews         MarketplaceReview[]
  recommendations Recommendation[]

  @@index([organizationId])
  @@index([createdById])
  @@index([type])
  @@index([status])
}

model MarketplacePurchase {
  id        String             @id @default(cuid())
  listingId String
  buyerId   String
  amount    Float
  currency  String
  status    String             @default("PENDING")
  paymentId String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  buyer     User               @relation("MarketplacePurchaseBuyer", fields: [buyerId], references: [id])
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])
  payment   Payment?           @relation(fields: [paymentId], references: [id])

  @@index([listingId])
  @@index([buyerId])
  @@index([paymentId])
}

model MarketplaceReview {
  id         String             @id @default(cuid())
  listingId  String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  listing    MarketplaceListing @relation(fields: [listingId], references: [id])
  reviewer   User               @relation("MarketplaceReviewer", fields: [reviewerId], references: [id])

  @@index([listingId])
  @@index([reviewerId])
}

model Boost {
  id        String             @id @default(cuid())
  listingId String
  type      String
  startDate DateTime
  endDate   DateTime
  status    String             @default("ACTIVE")
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([status])
}

model Recommendation {
  id        String             @id @default(cuid())
  listingId String
  type      String
  score     Float
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  listing   MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([type])
}

model Payment {
  id             String                @id @default(cuid())
  amount         Float
  currency       String
  status         String                @default("PENDING")
  paymentMethod  String
  paymentIntent  String?
  metadata       Json?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  subscriptionId String?
  purchases      MarketplacePurchase[]
  subscription   Subscription?         @relation(fields: [subscriptionId], references: [id])

  @@index([status])
  @@index([subscriptionId])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  role           String       @default("MEMBER")
  token          String       @unique
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@index([organizationId])
}

enum UserRole {
  CONTENT_CREATOR
  REVIEWER
  APPROVER
  PUBLISHER
  ADMIN
}

enum CampaignStatus {
  draft
  active
  completed
  paused
  cancelled
}

enum CampaignGoalType {
  AWARENESS
  ENGAGEMENT
  CONVERSION
  RETENTION
  REVENUE
  CUSTOM
}

enum ScheduleFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum ContentStatus {
  DRAFT
  PENDING_REVIEW
  IN_REVIEW
  CHANGES_REQUESTED
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

enum ApprovalStep {
  REVIEW
  APPROVAL
  PUBLISH
}

enum NotificationType {
  CONTENT_SUBMITTED
  REVIEW_ASSIGNED
  FEEDBACK_PROVIDED
  STATUS_CHANGED
  APPROVAL_REJECTED
  CONTENT_PUBLISHED
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum AudienceType {
  CUSTOM
  DYNAMIC
  STATIC
}

enum ContactListType {
  EMAIL
  PHONE
  CUSTOM
}

enum AudienceSegmentType {
  CUSTOM
  BEHAVIORAL
  DEMOGRAPHIC
  GEOGRAPHIC
  DEVICE
  TIME_BASED
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  UNSUBSCRIBED
  BOUNCED
  SPAM
}

enum AudienceStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DRAFT
}

enum TargetingRuleOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  GREATER_THAN
  LESS_THAN
  BETWEEN
  IN
  NOT_IN
  EXISTS
  NOT_EXISTS
}

enum TargetingRuleType {
  DEMOGRAPHIC
  BEHAVIORAL
  GEOGRAPHIC
  DEVICE
  TIME
  CUSTOM
}

enum ContentType {
  BLOG
  SOCIAL
  EMAIL
  ARTICLE
  NEWSLETTER
  PODCAST
  VIDEO
  EVENT
  ANNOUNCEMENT
  RESOURCE
}
