generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  CONTENT_CREATOR
  REVIEWER
  APPROVER
  PUBLISHER
  ADMIN
}

model User {
  id                      String               @id @default(cuid())
  clerkId                 String               @unique
  email                   String               @unique @db.VarChar(255)
  firstName               String?              @db.VarChar(100)
  lastName                String?              @db.VarChar(100)
  imageUrl                String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  emailVerified           DateTime?
  image                   String?
  name                    String?
  role                    UserRole             @default(CONTENT_CREATOR)
  accounts                Account[]
  activities              Activity[]
  calendarEvents          CalendarEvent[]
  content                 Content[]
  contentItems            ContentItem[]
  createdContent          ContentPiece[]
  organizationMemberships OrganizationMember[]
  projects                Project[]
  sessions                Session[]
  Template                Template[]
  createdApprovals        ContentApproval[]    @relation("CreatedApprovals")
  assignedApprovals       ContentApproval[]    @relation("AssignedApprovals")
  approvalHistory         ApprovalHistory[]
  comments                Comment[]
  notifications           Notification[]
}

model Organization {
  id             String               @id @default(cuid())
  name           String               @db.VarChar(100)
  slug           String               @unique @db.VarChar(100)
  logoUrl        String?
  website        String?
  primaryColor   String?              @default("#000000")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  calendarEvents CalendarEvent[]
  campaigns      Campaign[]
  clients        Client[]
  contentItems   ContentItem[]
  contentPieces  ContentPiece[]
  members        OrganizationMember[]
  projects       Project[]
  socialAccounts SocialAccount[]
  subscription   Subscription?
  Template       Template[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           String       @default("MEMBER")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, organizationId])
}

model Client {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  address        String?
  email          String
  phone          String?
  analytics      Analytics[]
  campaigns      Campaign[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projects       Project[]
  socialAccounts SocialAccount[]

  @@index([organizationId])
}

model Project {
  id             String         @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  status         String         @default("PLANNED")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  clientId       String?
  organizationId String
  managerId      String?
  campaigns      Campaign[]
  contentItems   ContentItem[]
  contentPieces  ContentPiece[]
  client         Client?        @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager        User?          @relation(fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SocialAccount {
  id             String       @id @default(cuid())
  platform       String
  handle         String
  accountId      String?
  accessToken    String?
  refreshToken   String?
  tokenExpiry    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  clientId       String?
  organizationId String
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  socialPosts    SocialPost[]

  @@unique([platform, handle, organizationId])
}

model ContentPiece {
  id             String       @id @default(cuid())
  title          String
  content        String
  contentType    String       @default("SOCIAL_POST")
  mediaUrls      String[]
  status         String       @default("DRAFT")
  scheduledFor   DateTime?
  publishedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authorId       String
  organizationId String
  projectId      String?
  campaignId     String?
  color          String?
  recurrence     Json?
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  campaign       Campaign?    @relation(fields: [campaignId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  engagements    Engagement[]
  socialPosts    SocialPost[]

  @@index([organizationId, status])
  @@index([authorId, createdAt])
}

model SocialPost {
  id              String        @id @default(cuid())
  externalPostId  String?
  status          String        @default("SCHEDULED")
  publishedAt     DateTime?
  scheduledAt     DateTime?
  metrics         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contentPieceId  String
  socialAccountId String
  contentPiece    ContentPiece  @relation(fields: [contentPieceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Engagement {
  id             String        @id @default(cuid())
  type           String
  text           String
  externalId     String?
  sentiment      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  contentPieceId String?
  contentPiece   ContentPiece? @relation(fields: [contentPieceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Analytics {
  id            String    @id @default(cuid())
  engagements   Int       @default(0)
  shares        Int       @default(0)
  likes         Int       @default(0)
  comments      Int       @default(0)
  conversions   Int       @default(0)
  revenue       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  clientId      String?
  campaignId    String?
  follows       Int       @default(0)
  new_followers Int       @default(0)
  timestamp     DateTime  @default(now())
  views         Int       @default(0)
  campaign      Campaign? @relation(fields: [campaignId], references: [id])
  client        Client?   @relation(fields: [clientId], references: [id])
}

model Subscription {
  id                   String       @id @default(cuid())
  plan                 String
  status               String
  startDate            DateTime
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organizationId       String       @unique
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ContentItem {
  id             String       @id @default(cuid())
  title          String
  body           String
  status         String       @default("DRAFT")
  scheduledFor   DateTime?
  publishedAt    DateTime?
  previewData    Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authorId       String
  organizationId String
  projectId      String?
  author         User         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Activity {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Campaign {
  id             String         @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  budget         Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String
  clientId       String?
  projectId      String?
  status         CampaignStatus @default(draft)
  analytics      Analytics[]
  client         Client?        @relation(fields: [clientId], references: [id], onUpdate: NoAction)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?       @relation(fields: [projectId], references: [id], onUpdate: NoAction)
  contentPieces  ContentPiece[]

  @@index([clientId])
  @@index([projectId])
  @@index([organizationId])
}

model Template {
  id             String       @id
  name           String
  content        String?
  description    String?
  category       String
  status         String       @default("DRAFT")
  lastUpdated    DateTime
  createdAt      DateTime     @default(now())
  previewImage   String?
  organizationId String
  authorId       String
  User           User         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([authorId])
  @@index([organizationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  type        String      // blog, email, social
  status      String      // draft, scheduled, published, archived
  content     String      @db.Text
  excerpt     String?     @db.Text
  media       Json?       // Array of media files
  tags        String[]
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  scheduledAt DateTime?
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  approval    ContentApproval?

  @@index([authorId])
  @@index([type])
  @@index([status])
}

model CalendarEvent {
  id                String       @id @default(cuid())
  title             String
  description       String?
  date              String
  time              String?
  type              String
  status            String
  contentType       String?
  socialMediaContent Json?
  userId            String
  organizationId    String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

enum CampaignStatus {
  draft
  active
  completed
  paused
  cancelled
}

enum ContentStatus {
  DRAFT
  PENDING_REVIEW
  IN_REVIEW
  CHANGES_REQUESTED
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

enum ApprovalStep {
  CREATION
  REVIEW
  APPROVAL
  PUBLICATION
}

model ContentApproval {
  id          String      @id @default(cuid())
  contentId   String      @unique // Reference to content
  status      ContentStatus
  currentStep ApprovalStep
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String      // User ID
  assignedTo  String?     // Reviewer/Approver ID
  comments    Comment[]
  history     ApprovalHistory[]
  content     Content     @relation(fields: [contentId], references: [id])
  creator     User        @relation("CreatedApprovals", fields: [createdBy], references: [id])
  assignee    User?       @relation("AssignedApprovals", fields: [assignedTo], references: [id])

  @@index([createdBy])
  @@index([assignedTo])
}

model ApprovalHistory {
  id          String      @id @default(cuid())
  approvalId  String      // Reference to ContentApproval
  status      ContentStatus
  step        ApprovalStep
  comment     String?
  createdAt   DateTime    @default(now())
  createdBy   String      // User ID
  approval    ContentApproval @relation(fields: [approvalId], references: [id])
  user        User        @relation(fields: [createdBy], references: [id])

  @@index([approvalId])
  @@index([createdBy])
}

model Comment {
  id          String      @id @default(cuid())
  approvalId  String      // Reference to ContentApproval
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String      // User ID
  parentId    String?     // For threaded comments
  approval    ContentApproval @relation(fields: [approvalId], references: [id])
  user        User        @relation(fields: [createdBy], references: [id])
  parent      Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]   @relation("CommentReplies")

  @@index([approvalId])
  @@index([createdBy])
  @@index([parentId])
}

enum NotificationType {
  CONTENT_SUBMITTED
  REVIEW_ASSIGNED
  FEEDBACK_PROVIDED
  STATUS_CHANGED
  APPROVAL_REJECTED
  CONTENT_PUBLISHED
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  message     String
  read        Boolean         @default(false)
  userId      String
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([read])
}
