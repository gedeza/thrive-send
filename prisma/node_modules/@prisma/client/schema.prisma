// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (connected to Clerk)
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizationMemberships OrganizationMember[]
  createdContent          ContentPiece[]
  contentItems            ContentItem[]
  projects                Project[]
  activities              Activity[]
}

// Organization (Service Provider)
model Organization {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  logoUrl      String?
  website      String?
  primaryColor String?  @default("#000000")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  members        OrganizationMember[]
  clients        Client[]
  projects       Project[]
  contentPieces  ContentPiece[]
  contentItems   ContentItem[]
  socialAccounts SocialAccount[]
  subscription   Subscription?
}

// Organization Member with role
model OrganizationMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, organizationId])
}

// Client (Municipality, Business, etc.)
model Client {
  id        String     @id @default(cuid())
  name      String
  type      ClientType
  industry  String?
  logoUrl   String?
  website   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  socialAccounts SocialAccount[]
  projects       Project[]
  analytics      Analytics[]
}

// Project represents a campaign or initiative for a client
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(PLANNED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  client         Client?        @relation(fields: [clientId], references: [id])
  clientId       String?
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  manager        User?          @relation(fields: [managerId], references: [id])
  managerId      String?
  contentPieces  ContentPiece[]
  contentItems   ContentItem[]
}

// Social Media Account
model SocialAccount {
  id           String    @id @default(cuid())
  platform     Platform
  handle       String
  accountId    String?
  accessToken  String?
  refreshToken String?
  tokenExpiry  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId       String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  socialPosts    SocialPost[]
}

// ContentPiece (Posts, articles, etc.)
model ContentPiece {
  id           String        @id @default(cuid())
  title        String
  content      String        @db.Text
  contentType  ContentType   @default(SOCIAL_POST)
  mediaUrls    String[]
  status       ContentStatus @default(DRAFT)
  scheduledFor DateTime?
  publishedAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  project        Project?     @relation(fields: [projectId], references: [id])
  projectId      String?
  socialPosts    SocialPost[]
  engagements    Engagement[]
}

// SocialPost represents a post published to a social media platform
model SocialPost {
  id             String     @id @default(cuid())
  externalPostId String? // ID on the social platform
  status         PostStatus @default(SCHEDULED)
  publishedAt    DateTime?
  scheduledAt    DateTime?
  metrics        Json? // Engagement metrics (likes, shares, etc.)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  contentPiece    ContentPiece  @relation(fields: [contentPieceId], references: [id], onDelete: Cascade)
  contentPieceId  String
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  socialAccountId String
}

// Engagement (Comments, Messages)
model Engagement {
  id         String         @id @default(cuid())
  type       EngagementType
  text       String
  externalId String?
  sentiment  Sentiment?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  contentPiece   ContentPiece? @relation(fields: [contentPieceId], references: [id])
  contentPieceId String?
}

// Analytics
model Analytics {
  id           String   @id @default(cuid())
  date         DateTime
  impressions  Int      @default(0)
  engagements  Int      @default(0)
  clicks       Int      @default(0)
  shares       Int      @default(0)
  newFollowers Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String
}

// Subscription
model Subscription {
  id                   String             @id @default(cuid())
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  startDate            DateTime
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique
}

// ContentItem model for managing content scheduling and creation
model ContentItem {
  id           String            @id @default(cuid())
  title        String
  body         String            @db.Text
  status       ContentItemStatus @default(DRAFT)
  scheduledFor DateTime?
  publishedAt  DateTime?
  previewData  Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  project        Project?     @relation(fields: [projectId], references: [id])
  projectId      String?
}

// Activity Log
model Activity {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Enums
enum Role {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum ClientType {
  MUNICIPALITY
  BUSINESS
  STARTUP
  INDIVIDUAL
  NONPROFIT
}

enum Platform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  PINTEREST
}

enum ContentType {
  SOCIAL_POST
  NEWSLETTER
  ARTICLE
  IMAGE
  VIDEO
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum EngagementType {
  COMMENT
  MESSAGE
  MENTION
  REPLY
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIAL
}

enum ContentItemStatus {
  DRAFT
  REVIEW
  APPROVED
  SCHEDULED
  PUBLISHED
  FAILED
  ARCHIVED
}
