openapi: 3.0.3
info:
  title: ThriveSend API
  description: |
    Comprehensive API for ThriveSend platform enabling service providers to manage 
    multi-client social media campaigns, content creation, analytics, and monetization features.
  version: 1.0.0
  contact:
    name: ThriveSend API Support
    email: api-support@thrivesend.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.thrivesend.com/v1
    description: Production server
  - url: https://staging-api.thrivesend.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication & Users
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create new service provider account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - organizationName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                organizationName:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  # Organizations
  /organizations:
    get:
      tags:
        - Organizations
      summary: Get user organizations
      description: Retrieve all organizations user has access to
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

    post:
      tags:
        - Organizations
      summary: Create new organization
      description: Create a new service provider organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  /organizations/{organizationId}:
    get:
      tags:
        - Organizations
      summary: Get organization details
      parameters:
        - $ref: '#/components/parameters/OrganizationId'
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  # Clients
  /organizations/{organizationId}/clients:
    get:
      tags:
        - Clients
      summary: Get organization clients
      parameters:
        - $ref: '#/components/parameters/OrganizationId'
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Clients retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Clients
      summary: Create new client
      parameters:
        - $ref: '#/components/parameters/OrganizationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

  # Content Management
  /content:
    get:
      tags:
        - Content
      summary: Get content list
      parameters:
        - in: query
          name: clientId
          schema:
            type: string
            format: uuid
        - in: query
          name: status
          schema:
            type: string
            enum: [DRAFT, REVIEW, APPROVED, PUBLISHED, ARCHIVED]
        - in: query
          name: type
          schema:
            type: string
            enum: [BLOG, SOCIAL, EMAIL, VIDEO, IMAGE]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Content list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Content
      summary: Create new content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
      responses:
        '201':
          description: Content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'

  /content/{contentId}:
    get:
      tags:
        - Content
      summary: Get content details
      parameters:
        - $ref: '#/components/parameters/ContentId'
      responses:
        '200':
          description: Content details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'

    put:
      tags:
        - Content
      summary: Update content
      parameters:
        - $ref: '#/components/parameters/ContentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
      responses:
        '200':
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'

    delete:
      tags:
        - Content
      summary: Delete content
      parameters:
        - $ref: '#/components/parameters/ContentId'
      responses:
        '204':
          description: Content deleted successfully

  # Calendar & Events
  /calendar/events:
    get:
      tags:
        - Calendar
      summary: Get calendar events
      parameters:
        - in: query
          name: clientId
          schema:
            type: string
            format: uuid
        - in: query
          name: start
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          schema:
            type: string
            format: date-time
        - in: query
          name: platform
          schema:
            type: array
            items:
              type: string
              enum: [FACEBOOK, TWITTER, INSTAGRAM, LINKEDIN, EMAIL]
      responses:
        '200':
          description: Calendar events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CalendarEvent'

    post:
      tags:
        - Calendar
      summary: Create calendar event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCalendarEventRequest'
      responses:
        '201':
          description: Calendar event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEvent'

  # Analytics
  /analytics/metrics:
    get:
      tags:
        - Analytics
      summary: Get analytics metrics
      parameters:
        - in: query
          name: clientId
          schema:
            type: string
            format: uuid
        - in: query
          name: campaignId
          schema:
            type: string
            format: uuid
        - in: query
          name: dateRange
          schema:
            type: object
            properties:
              start:
                type: string
                format: date-time
              end:
                type: string
                format: date-time
        - in: query
          name: metrics
          schema:
            type: array
            items:
              type: string
              enum: [IMPRESSIONS, ENGAGEMENT, CLICKS, CONVERSIONS, REACH]
      responses:
        '200':
          description: Analytics metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsMetrics'

  /analytics/reports:
    post:
      tags:
        - Analytics
      summary: Generate analytics report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateReportRequest'
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsReport'

  # Code Quality & Optimization
  /optimization/hooks:
    get:
      tags:
        - Optimization
      summary: Get optimization hook status
      responses:
        '200':
          description: Optimization hooks status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptimizationHookStatus'

    post:
      tags:
        - Optimization
      summary: Execute optimization analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptimizationAnalysisRequest'
      responses:
        '200':
          description: Optimization analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptimizationAnalysisResult'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    OrganizationId:
      name: organizationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Organization unique identifier

    ContentId:
      name: contentId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Content unique identifier

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [ADMIN, CONTENT_CREATOR, REVIEWER, APPROVER, PUBLISHER]
        organizationId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        website:
          type: string
          format: uri
        subscriptionStatus:
          type: string
          enum: [TRIAL, ACTIVE, SUSPENDED, CANCELLED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [MUNICIPALITY, BUSINESS, STARTUP, INDIVIDUAL]
        industry:
          type: string
        organizationId:
          type: string
          format: uuid
        settings:
          type: object
          properties:
            branding:
              type: object
            socialAccounts:
              type: array
              items:
                type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Content:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        type:
          type: string
          enum: [BLOG, SOCIAL, EMAIL, VIDEO, IMAGE]
        status:
          type: string
          enum: [DRAFT, REVIEW, APPROVED, PUBLISHED, ARCHIVED]
        clientId:
          type: string
          format: uuid
        authorId:
          type: string
          format: uuid
        publishedAt:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CalendarEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        platform:
          type: array
          items:
            type: string
            enum: [FACEBOOK, TWITTER, INSTAGRAM, LINKEDIN, EMAIL]
        contentId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        status:
          type: string
          enum: [SCHEDULED, PUBLISHED, CANCELLED]
        recurrence:
          type: object
          properties:
            pattern:
              type: string
              enum: [DAILY, WEEKLY, MONTHLY]
            interval:
              type: integer
            until:
              type: string
              format: date-time

    AnalyticsMetrics:
      type: object
      properties:
        period:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        metrics:
          type: object
          properties:
            impressions:
              type: integer
            engagement:
              type: integer
            clicks:
              type: integer
            conversions:
              type: integer
            reach:
              type: integer
            engagementRate:
              type: number
              format: float
        breakdown:
          type: object
          properties:
            byPlatform:
              type: array
              items:
                type: object
                properties:
                  platform:
                    type: string
                  metrics:
                    type: object
            byContent:
              type: array
              items:
                type: object
                properties:
                  contentId:
                    type: string
                    format: uuid
                  metrics:
                    type: object

    OptimizationHookStatus:
      type: object
      properties:
        enabled:
          type: boolean
        activeRules:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              severity:
                type: string
                enum: [ERROR, WARNING, SUGGESTION]
              category:
                type: string
                enum: [PERFORMANCE, SECURITY, MAINTAINABILITY, COST]
        lastAnalysis:
          type: string
          format: date-time
        metrics:
          type: object
          properties:
            violationsBlocked:
              type: integer
            codeQualityScore:
              type: number
              format: float

    OptimizationAnalysisResult:
      type: object
      properties:
        analysisId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        violations:
          type: array
          items:
            type: object
            properties:
              ruleId:
                type: string
              severity:
                type: string
                enum: [ERROR, WARNING, SUGGESTION]
              message:
                type: string
              file:
                type: string
              line:
                type: integer
              suggestions:
                type: array
                items:
                  type: string
        summary:
          type: object
          properties:
            totalViolations:
              type: integer
            errorCount:
              type: integer
            warningCount:
              type: integer
            suggestionCount:
              type: integer
            qualityScore:
              type: number
              format: float

    # Request schemas
    CreateOrganizationRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        website:
          type: string
          format: uri

    CreateClientRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
          enum: [MUNICIPALITY, BUSINESS, STARTUP, INDIVIDUAL]
        industry:
          type: string
        description:
          type: string

    CreateContentRequest:
      type: object
      required:
        - title
        - body
        - type
        - clientId
      properties:
        title:
          type: string
        body:
          type: string
        type:
          type: string
          enum: [BLOG, SOCIAL, EMAIL, VIDEO, IMAGE]
        clientId:
          type: string
          format: uuid
        metadata:
          type: object

    UpdateContentRequest:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        status:
          type: string
          enum: [DRAFT, REVIEW, APPROVED, PUBLISHED, ARCHIVED]
        metadata:
          type: object

    CreateCalendarEventRequest:
      type: object
      required:
        - title
        - startTime
        - endTime
        - platform
        - clientId
      properties:
        title:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        platform:
          type: array
          items:
            type: string
            enum: [FACEBOOK, TWITTER, INSTAGRAM, LINKEDIN, EMAIL]
        contentId:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        recurrence:
          type: object

    GenerateReportRequest:
      type: object
      required:
        - dateRange
        - metrics
      properties:
        clientId:
          type: string
          format: uuid
        campaignId:
          type: string
          format: uuid
        dateRange:
          type: object
          required:
            - start
            - end
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        metrics:
          type: array
          items:
            type: string
            enum: [IMPRESSIONS, ENGAGEMENT, CLICKS, CONVERSIONS, REACH]
        format:
          type: string
          enum: [JSON, PDF, CSV]
          default: JSON

    OptimizationAnalysisRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          items:
            type: string
        rules:
          type: array
          items:
            type: string
        severity:
          type: string
          enum: [ERROR, WARNING, SUGGESTION]

    AnalyticsReport:
      type: object
      properties:
        id:
          type: string
          format: uuid
        format:
          type: string
          enum: [JSON, PDF, CSV]
        data:
          type: object
        downloadUrl:
          type: string
          format: uri
        generatedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Organizations
    description: Service provider organization management
  - name: Clients
    description: Client account management for service providers
  - name: Content
    description: Content creation and management
  - name: Calendar
    description: Content scheduling and calendar management
  - name: Analytics
    description: Performance analytics and reporting
  - name: Optimization
    description: Code quality and optimization features