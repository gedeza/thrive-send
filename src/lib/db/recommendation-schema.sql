-- Enhanced Recommendation Network Database Schema
-- This extends the existing Prisma schema with newsletter recommendation models

-- Newsletter model (extends existing content/campaigns)
CREATE TABLE IF NOT EXISTS "Newsletter" (
  "id" TEXT NOT NULL PRIMARY KEY,
  "title" TEXT NOT NULL,
  "description" TEXT,
  "clientId" TEXT NOT NULL,
  "organizationId" TEXT NOT NULL, -- Service provider
  "subscriberCount" INTEGER DEFAULT 0,
  "averageOpenRate" DECIMAL(5,2) DEFAULT 0.0,
  "averageClickRate" DECIMAL(5,2) DEFAULT 0.0,
  "categories" TEXT[], -- Interest categories
  "targetAudience" JSONB DEFAULT '{}',
  "isActiveForRecommendations" BOOLEAN DEFAULT true,
  "recommendationWeight" DECIMAL(3,2) DEFAULT 1.0,
  "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  
  CONSTRAINT "Newsletter_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES "Client"("id") ON DELETE CASCADE,
  CONSTRAINT "Newsletter_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "Organization"("id") ON DELETE CASCADE
);

-- Recommendation Relationship between newsletters
CREATE TABLE IF NOT EXISTS "NewsletterRecommendation" (
  "id" TEXT NOT NULL PRIMARY KEY,
  "fromNewsletterId" TEXT NOT NULL, -- Newsletter making the recommendation
  "toNewsletterId" TEXT NOT NULL,   -- Newsletter being recommended
  "status" TEXT DEFAULT 'ACTIVE',  -- ACTIVE, PAUSED, ENDED
  "type" TEXT DEFAULT 'MUTUAL',    -- MUTUAL, ONE_WAY
  "priority" INTEGER DEFAULT 5,    -- 1-10 priority score
  "startDate" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "endDate" TIMESTAMP(3),
  "targetAudienceOverlap" DECIMAL(5,2) DEFAULT 0.0,
  "estimatedReach" INTEGER DEFAULT 0,
  "metadata" JSONB DEFAULT '{}',
  "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  
  CONSTRAINT "NewsletterRecommendation_fromNewsletterId_fkey" FOREIGN KEY ("fromNewsletterId") REFERENCES "Newsletter"("id") ON DELETE CASCADE,
  CONSTRAINT "NewsletterRecommendation_toNewsletterId_fkey" FOREIGN KEY ("toNewsletterId") REFERENCES "Newsletter"("id") ON DELETE CASCADE,
  CONSTRAINT "NewsletterRecommendation_unique" UNIQUE ("fromNewsletterId", "toNewsletterId")
);

-- Recommendation Performance Tracking
CREATE TABLE IF NOT EXISTS "RecommendationPerformance" (
  "id" TEXT NOT NULL PRIMARY KEY,
  "recommendationId" TEXT NOT NULL,
  "period" TEXT NOT NULL, -- 'daily', 'weekly', 'monthly'
  "periodStart" TIMESTAMP(3) NOT NULL,
  "periodEnd" TIMESTAMP(3) NOT NULL,
  "impressions" INTEGER DEFAULT 0,
  "clicks" INTEGER DEFAULT 0,
  "conversions" INTEGER DEFAULT 0, -- New subscribers
  "revenue" DECIMAL(10,2) DEFAULT 0.0,
  "ctr" DECIMAL(5,2) DEFAULT 0.0, -- Click-through rate
  "conversionRate" DECIMAL(5,2) DEFAULT 0.0,
  "costPerConversion" DECIMAL(8,2) DEFAULT 0.0,
  "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  
  CONSTRAINT "RecommendationPerformance_recommendationId_fkey" FOREIGN KEY ("recommendationId") REFERENCES "NewsletterRecommendation"("id") ON DELETE CASCADE,
  CONSTRAINT "RecommendationPerformance_unique" UNIQUE ("recommendationId", "period", "periodStart")
);

-- Service Provider Recommendation Settings
CREATE TABLE IF NOT EXISTS "RecommendationSettings" (
  "id" TEXT NOT NULL PRIMARY KEY,
  "organizationId" TEXT NOT NULL,
  "isNetworkActive" BOOLEAN DEFAULT true,
  "autoAcceptRecommendations" BOOLEAN DEFAULT false,
  "maxRecommendationsPerNewsletter" INTEGER DEFAULT 5,
  "minAudienceOverlap" DECIMAL(5,2) DEFAULT 10.0,
  "preferredCategories" TEXT[],
  "excludedOrganizations" TEXT[],
  "revSharePercentage" DECIMAL(5,2) DEFAULT 0.0, -- Revenue share for successful conversions
  "qualityThreshold" DECIMAL(3,2) DEFAULT 3.0, -- Min quality score (1-5)
  "settings" JSONB DEFAULT '{}',
  "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  
  CONSTRAINT "RecommendationSettings_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "Organization"("id") ON DELETE CASCADE,
  CONSTRAINT "RecommendationSettings_organizationId_unique" UNIQUE ("organizationId")
);

-- Recommendation Matching Algorithm Data
CREATE TABLE IF NOT EXISTS "RecommendationMatch" (
  "id" TEXT NOT NULL PRIMARY KEY,
  "fromNewsletterId" TEXT NOT NULL,
  "toNewsletterId" TEXT NOT NULL,
  "matchScore" DECIMAL(5,2) NOT NULL, -- Algorithmic matching score
  "categoryAlignment" DECIMAL(5,2) DEFAULT 0.0,
  "audienceCompatibility" DECIMAL(5,2) DEFAULT 0.0,
  "performanceHistory" DECIMAL(5,2) DEFAULT 0.0,
  "geographicAlignment" DECIMAL(5,2) DEFAULT 0.0,
  "seasonalRelevance" DECIMAL(5,2) DEFAULT 0.0,
  "competitionLevel" DECIMAL(5,2) DEFAULT 0.0,
  "isAutoGenerated" BOOLEAN DEFAULT true,
  "lastCalculated" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "metadata" JSONB DEFAULT '{}',
  "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
  
  CONSTRAINT "RecommendationMatch_fromNewsletterId_fkey" FOREIGN KEY ("fromNewsletterId") REFERENCES "Newsletter"("id") ON DELETE CASCADE,
  CONSTRAINT "RecommendationMatch_toNewsletterId_fkey" FOREIGN KEY ("toNewsletterId") REFERENCES "Newsletter"("id") ON DELETE CASCADE,
  CONSTRAINT "RecommendationMatch_unique" UNIQUE ("fromNewsletterId", "toNewsletterId")
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS "Newsletter_organizationId_idx" ON "Newsletter"("organizationId");
CREATE INDEX IF NOT EXISTS "Newsletter_clientId_idx" ON "Newsletter"("clientId");
CREATE INDEX IF NOT EXISTS "Newsletter_categories_idx" ON "Newsletter" USING gin("categories");
CREATE INDEX IF NOT EXISTS "Newsletter_isActiveForRecommendations_idx" ON "Newsletter"("isActiveForRecommendations");

CREATE INDEX IF NOT EXISTS "NewsletterRecommendation_fromNewsletterId_idx" ON "NewsletterRecommendation"("fromNewsletterId");
CREATE INDEX IF NOT EXISTS "NewsletterRecommendation_toNewsletterId_idx" ON "NewsletterRecommendation"("toNewsletterId");
CREATE INDEX IF NOT EXISTS "NewsletterRecommendation_status_idx" ON "NewsletterRecommendation"("status");
CREATE INDEX IF NOT EXISTS "NewsletterRecommendation_startDate_idx" ON "NewsletterRecommendation"("startDate");

CREATE INDEX IF NOT EXISTS "RecommendationPerformance_recommendationId_idx" ON "RecommendationPerformance"("recommendationId");
CREATE INDEX IF NOT EXISTS "RecommendationPerformance_periodStart_idx" ON "RecommendationPerformance"("periodStart");

CREATE INDEX IF NOT EXISTS "RecommendationMatch_matchScore_idx" ON "RecommendationMatch"("matchScore" DESC);
CREATE INDEX IF NOT EXISTS "RecommendationMatch_lastCalculated_idx" ON "RecommendationMatch"("lastCalculated");

-- Views for common queries
CREATE OR REPLACE VIEW "RecommendationNetworkOverview" AS
SELECT 
  n.id as newsletter_id,
  n.title,
  n.organizationId,
  n.subscriberCount,
  n.averageOpenRate,
  COUNT(nr1.id) as outgoing_recommendations,
  COUNT(nr2.id) as incoming_recommendations,
  COALESCE(AVG(rp.conversionRate), 0) as avg_conversion_rate,
  COALESCE(SUM(rp.conversions), 0) as total_conversions
FROM "Newsletter" n
LEFT JOIN "NewsletterRecommendation" nr1 ON n.id = nr1.fromNewsletterId AND nr1.status = 'ACTIVE'
LEFT JOIN "NewsletterRecommendation" nr2 ON n.id = nr2.toNewsletterId AND nr2.status = 'ACTIVE'  
LEFT JOIN "RecommendationPerformance" rp ON nr1.id = rp.recommendationId
WHERE n.isActiveForRecommendations = true
GROUP BY n.id, n.title, n.organizationId, n.subscriberCount, n.averageOpenRate;

CREATE OR REPLACE VIEW "TopPerformingRecommendations" AS
SELECT 
  nr.id,
  nf.title as from_newsletter,
  nt.title as to_newsletter,
  nf.organizationId as from_org,
  nt.organizationId as to_org,
  AVG(rp.conversionRate) as avg_conversion_rate,
  SUM(rp.conversions) as total_conversions,
  SUM(rp.revenue) as total_revenue,
  AVG(rp.ctr) as avg_ctr
FROM "NewsletterRecommendation" nr
JOIN "Newsletter" nf ON nr.fromNewsletterId = nf.id
JOIN "Newsletter" nt ON nr.toNewsletterId = nt.id
JOIN "RecommendationPerformance" rp ON nr.id = rp.recommendationId
WHERE nr.status = 'ACTIVE'
  AND rp.periodStart >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY nr.id, nf.title, nt.title, nf.organizationId, nt.organizationId
ORDER BY avg_conversion_rate DESC, total_conversions DESC;